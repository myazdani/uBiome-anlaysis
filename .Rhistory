df = read.csv("~/Dropbox/Broadway_processed_data/processedData/dom_HSV_sample.csv", header = TRUE, stringsAsFactors = FALSE)
head9DF
head(df)
table(df$hour)
library(stockPortfolio)
library(quadprog)
stocks <- c(
"SPY",
"EFA",
"IWM",
"VWO",
"LQD",
"HYG")
stocks
returns <- getReturns(names(stocks), freq="week")
returns <- getReturns(stocks, freq="week")
head(returns)
class(returns)
names(returns)
head(returns)
names(returns)
head(returns$R)
head(returns$ticker)
head(returns$period)
head(returns$start)
?getReturns
source('~/Desktop/portfollio.R', echo=TRUE)
source('~/Desktop/portfollio.R', echo=TRUE)
summary(returns)
library(ggplot2)
eff.frontier <- function (returns, short="no", max.allocation=NULL, risk.premium.up=.5, risk.increment=.005){
# return argument should be a m x n matrix with one column per security
# short argument is whether short-selling is allowed; default is no (short selling prohibited)
# max.allocation is the maximum % allowed for any one security (reduces concentration)
# risk.premium.up is the upper limit of the risk premium modeled (see for loop below)
# risk.increment is the increment (by) value used in the for loop
covariance <- cov(returns)
print(covariance)
n <- ncol(covariance)
# Create initial Amat and bvec assuming only equality constraint (short-selling is allowed, no allocation constraints)
Amat <- matrix (1, nrow=n)
bvec <- 1
meq <- 1
# Then modify the Amat and bvec if short-selling is prohibited
if(short=="no"){
Amat <- cbind(1, diag(n))
bvec <- c(bvec, rep(0, n))
}
# And modify Amat and bvec if a max allocation (concentration) is specified
if(!is.null(max.allocation)){
if(max.allocation > 1 | max.allocation <0){
stop("max.allocation must be greater than 0 and less than 1")
}
if(max.allocation * n < 1){
stop("Need to set max.allocation higher; not enough assets to add to 1")
}
Amat <- cbind(Amat, -diag(n))
bvec <- c(bvec, rep(-max.allocation, n))
}
# Calculate the number of loops based on how high to vary the risk premium and by what increment
loops <- risk.premium.up / risk.increment + 1
loop <- 1
# Initialize a matrix to contain allocation and statistics
# This is not necessary, but speeds up processing and uses less memory
eff <- matrix(nrow=loops, ncol=n+3)
# Now I need to give the matrix column names
colnames(eff) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
# Loop through the quadratic program solver
for (i in seq(from=0, to=risk.premium.up, by=risk.increment)){
dvec <- colMeans(returns) * i # This moves the solution up along the efficient frontier
sol <- solve.QP(covariance, dvec=dvec, Amat=Amat, bvec=bvec, meq=meq)
eff[loop,"Std.Dev"] <- sqrt(sum(sol$solution *colSums((covariance * sol$solution))))
eff[loop,"Exp.Return"] <- as.numeric(sol$solution %*% colMeans(returns))
eff[loop,"sharpe"] <- eff[loop,"Exp.Return"] / eff[loop,"Std.Dev"]
eff[loop,1:n] <- sol$solution
loop <- loop+1
}
return(as.data.frame(eff))
}
eff <- eff.frontier(returns=returns$R, short="yes", max.allocation=.45, risk.premium.up=.5, risk.increment=.001)
head(eff)
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),]
# Color Scheme
ealred  <- "#7D110C"
ealtan  <- "#CDC4B6"
eallighttan <- "#F7F6F0"
ealdark  <- "#423C30"
ggplot(eff, aes(x=Std.Dev, y=Exp.Return)) + geom_point(alpha=.1, color=ealdark) +
geom_point(data=eff.optimal.point, aes(x=Std.Dev, y=Exp.Return, label=sharpe), color=ealred, size=5) +
annotate(geom="text", x=eff.optimal.point$Std.Dev, y=eff.optimal.point$Exp.Return,
label=paste("Risk: ", round(eff.optimal.point$Std.Dev*100, digits=3),"\nReturn: ",
round(eff.optimal.point$Exp.Return*100, digits=4),"%\nSharpe: ",
round(eff.optimal.point$sharpe*100, digits=2), "%", sep=""), hjust=0, vjust=1.2) +
ggtitle("Efficient Frontier\nand Optimal Portfolio") + labs(x="Risk (standard deviation of portfolio variance)", y="Return") +
theme(panel.background=element_rect(fill=eallighttan), text=element_text(color=ealdark),
plot.title=element_text(size=24, color=ealred))
source('~/Desktop/portfollio.R', echo=TRUE)
df = read.csv("~/Dropbox/Broadway_processed_data/processedData/dom_HSV_sample.csv", header = TRUE, stringsAsFactors = FALSE)
head(df)
ggplot(df, aes(x = V.mode, S.mode, col = hsv(h = H.mode, s= S.mode, v = V.mode))) + geom_point()
library(ggplot2)
ggplot(df, aes(x = V.mode, S.mode, col = hsv(h = H.mode, s= S.mode, v = V.mode))) + geom_point()
ggplot(df, aes(x = V.mode, S.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256))) + geom_point()
table(df$hour)
ggplot(subset(df, hour == 0), aes(x = V.mode, S.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256))) + geom_point()
ggplot(subset(df, hour == 0), aes(x = V.mode, S.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256))) + geom_point() + theme(legend.position="none")
ggplot(df, aes(x = V.mode, S.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256))) + geom_point() + facet_wrap(~hour) + theme(legend.position="none") -> p
print(p)
ggplot(df, aes(x = as.factor(hour), y = V.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256))) + geom_point() + theme(legend.position="none")
ggplot(df, aes(x = as.factor(hour), y = V.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256))) + geom_bar() + theme(legend.position="none")
ggplot(df, aes(x = as.factor(hour), y = V.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256))) + geom_bar(stat="identity") + theme(legend.position="none")
ggplot(df, aes(x = as.factor(hour), y = V.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256 -1))) + geom_bar(stat="identity") + theme(legend.position="none")
ggplot(df, aes(x = as.factor(hour), y = V.mode, col = hsv(h = H.mode/256, s= S.mode/256, v = V.mode/256))) + geom_bar() + theme(legend.position="none")
head(df)
ggplot(df, aes(x = as.factor(hour), y = V.mode)) + geom_bar()
aggregate(df, by = hour, FUN = mean)
aggregate(df, by = df$hour, FUN = mean)
aggregate(df, by = list(df$hour), FUN = mean)
aggregate(df, by = list(df$hour), FUN = mean) -> df.agg
ggplot(df.agg, aes(x = Group.1, y = V.mode)) + geom_bar()
ggplot(df.agg, aes(x = Group.1, y = V.mode)) + geom_bar(stat = "identity")
ggplot(df.agg, aes(x = Group.1, y = S.mode)) + geom_bar(stat = "identity")
ggplot(df.agg, aes(x = Group.1, y = H.mode)) + geom_bar(stat = "identity")
library(reshape)
df.m = melt(df.agg, id.vars = Group.1)
?melt
df.m = melt(df.agg, id.vars = "Group.1")
head(df.m)
df.agg$filename = NULL
df.m = melt(df.agg, id.vars = "Group.1")
head(df.m)
head(df.agg)
df.agg$Group.1 = NULL
df.m = melt(df.agg, id.vars = "hour")
head(df.m)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(~variabe, nrow = 1)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(.~variabe, nrow = 1)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(.~variable, nrow = 1)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(~variable, nrow = 1)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(~variable, nrow = 1) + xlab("hour")
bleh = read.csv("~/Desktop/DeviantArt-simple_sort/", header = FALSE, stringsAsFactors = FALSE)
bleh = read.delim("~/Desktop/DeviantArt-simple_sort/", header = FALSE, stringsAsFactors = FALSE)
bleh = read.delim("~/Desktop/DeviantArt-simple_sort/", header = FALSE, stringsAsFactors = FALSE)
bleh = read.table("~/Desktop/DeviantArt-simple_sort/", header = FALSE, stringsAsFactors = FALSE)
bleh = read.delim("~/Desktop/DeviantArt_phtography_images.txt", header = FALSE, stringsAsFactors = FALSE)
head(bleh)
names(bleh) = "filename"
head(bleh)
strsplit(bleh$filename[1], split = "/")
strsplit(bleh$filename[1], split = "/")[[1]]
strsplit(bleh$filename[1], split = "/")[[1]][2]
bleh$cat.1 = sapply(bleh$filename, FUN = function(x) strsplit(x, split = "/")[[1]][2])
bleh$cat.2 = sapply(bleh$filename, FUN = function(x) strsplit(x, split = "/")[[1]][3])
table(bleh$cat.1)
table(bleh$cat.2)
table(bleh$cat.1)
version()
version
update.packages(checkBuilt = TRUE)
version
packageStatus()
library(devtools)
install_github("myazdani/cats")
library(cats)
?cat_function
?cat_function
cat_function()
?cat_function
library(cats)
?cat_function
single.face = read.delim("~/Dropbox/Broadway_paper/broadway_samples_to_label/data-labels/AliseLabels_raw/00_1_face_textfile.txt", header = FALSE, stringsAsFactors = FALSE)
head(single.face)
multiple.faces = read.delim("~/Dropbox/Broadway_paper/broadway_samples_to_label/data-labels/AliseLabels_raw/00_2_or_more_textfile.txt", header = FALSE, stringsAsFactors = FALSE)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][length(strsplit(x, split = "//")[[1]])])
head(single.face)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][length(strsplit(x, split = "//"))])
head(single.face)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][8])
head(single.face)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][7])
head(single.face)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][6])
head(single.face)
strsplit(single.face$filename[1], split = "///")
strsplit(single.face$filename[1], split = "//")
strsplit(single.face$filename[1], split = "/")
strsplit(single.face$filename[1], split = "\\")
strsplit(single.face$filename[1], split = "\")
)
strsplit(single.face$filename[1], split = "\\")
strsplit(single.face$filename[1], split = "\\\")
)
strsplit(single.face$filename[1], split = "\\\\")
strsplit(single.face$filename[1], split = "\\\\\\\\")
strsplit(single.face$filename[1], split = "\\\\\\\\")
strsplit(single.face$filename[1], split = 00_1_face\\")
strsplit(single.face$filename[1], split = "00_1_face\\")
strsplit(single.face$filename[1], split = "00_1_face")
strsplit(single.face$V1[1], split = "00_1_face")
strsplit(single.face$V1[1], split = "\\")
strsplit(single.face$V1[1], split = "\\\\\")
strsplit(single.face$V1[1], split = "\\\\")
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "\\\\")[[1]][length(strsplit(x, split = "\\\\")[[1]])])
head(single.face)
multiple.faces$filename = sapply(multiple.faces$V1, FUN = function(x) strsplit(x, split = "\\\\")[[1]][length(strsplit(x, split = "\\\\")[[1]])])
head(multiple.faces)
?list.files
interaction(multiple.faces$filename, single.face$filename)
length(multiple.faces$filename)
head(multiple.faces$filename)
head(single.face$filename)
tail(single.face$filename)
bleh = interaction(multiple.faces$filename, single.face$filename)
bleh = intersect(multiple.faces$filename, single.face$filename)
files = read.delim("~/Desktop/filename_samples.txt", header = FALSE, stringsAsFactors = FALSE)
head(files)
files$filenames = sapply(files$V1, FUN = function(x) strsplit(x, split = "/")[[1]][length(strsplit(x, split = "/")[[1]])])
head(files)
multiple.faces$filename = sapply(multiple.faces$filename, FUN = function(x) gsub(" ", "", x, fixed = TRUE))
head(multiple.faces)
head(multiple.faces$filename)
single.face$filename = sapply(single.face$filename, FUN = function(x) gsub(" ", "", x, fixed = TRUE))
files$face.label = "No faces"
files$face.label[which(files$filenames %in% single.face$filename)] = "Single face"
files$face.label[which(files$filenames %in% multiple.faces$filename)] = "Multiple faces"
head(files)
table(files$face.label)
opencv = read.csv("~/Dropbox/Broadway_paper/broadway_samples_to_label/data-labels/broadway_sample.csv", header = TRUE, stringsAsFactors= FALSE)
head(opencv)
files.opencv = merge(opencv[,c("filename", "num_faces")], files)
names(files.opencv)
?merge
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all.y = TRUE)
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all = FALSE)
head(opencv$filename)
head(files$filenames)
names(files)
names(files)[2] = "filename"
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all = FALSE)
duplicated(files.opencv$filename)
which(duplicated(files.opencv$filename))
anyDuplicated(files.opencv$filename)
n_occur = data.frame(table(files.opencv$filename))
n_occur[n_occur$Freq > 1,]
which(files$filename == "10518159_856199451074135_1247659821_n.jpg")
files[442,]
files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"
which(files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg")
files.opencv[ which(files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"), ]
opencv[which(opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"),]
nrow(files.opencv)
nrow(unique(files.opencv))
library(caret)
head(files.opencv)
files.opencv$OpenCV.label = "No faces"
files.opencv$OpenCV.label[which(files.opencv$num_faces ==1] = "Single face"
files.opencv$OpenCV.label[which(files.opencv$num_faces ==1)] = "Single face"
head(files.opencv)
files.opencv$OpenCV.label[which(files.opencv$num_faces >1)] = "Multiple faces"
head(files.opencv, 10)
head(files.opencv, 20)
confusionMatrix(files.opencv$face.label, files.opencv$OpenCV.label)
nrow(single.face)
8 + 348 + 298
files.opencv.unique = unique(files.opencv)
nrow(files.opencv.unique)
confusionMatrix(files.opencv$OpenCV.label, files.opencv$face.label)
confusionMatrix(files.opencv.unique$OpenCV.label, files.opencv.unique$face.label)
confusionMatrix(files.opencv.unique$OpenCV.label, files.opencv.unique$face.label)
source('~/Dropbox/Broadway_paper/broadway_samples_to_label/scripts/parse-confusion-matrix.R', echo=TRUE)
head(files.opencv.unique)
class(files.opencv.unique$face.label)
class(files.opencv.unique$OpenCV.label)
unique(files.opencv.unique$OpenCV.label)
unique(files.opencv.unique$face.label)
source('~/Dropbox/Broadway_paper/broadway_samples_to_label/scripts/parse-confusion-matrix.R', echo=TRUE)
install.packages("~/Documents/pairwiseDist/")
library(pairwiseDist)
?pairwise.dist
library(pairwiseDist)
?metric.learning
library(pairwiseDist)
?metric.learning
x <- read.table(textConnection('t0 t1 t2
aaa  0  1  0
bbb  1  0  1
ccc  1  1  1
ddd  1  1  0
' ), header=TRUE)
metric.learning(target = x$t0, df = x)
bleh = read.delim("~/Desktop/ubiome/bray_curtis_ubiome_amgut.txt", header = TRUE, stringsAsFactors = FALSE)
head(bleh)
names(bleh)
bleh[c(1:40), c(1:40)]
bleh[c(1:39), c(1:39)]
bleh[c(1:39), c(1:39)]
bleh[c(1:38), c(1:39)]
library(pairDist)
library(pairwiseDist)
rm(bleh)
ubiome.amgut = read.delim("~/Desktop/ubiome/bray_curtis_ubiome_amgut.txt", header = TRUE, stringsAsFactors = FALSE)
head(ubiome.amgut)
ubiome = ubiome.amgut[c(1:38), c(1:39)]
names(ubiome)
ubiome$X
names(ubiome)[1] = "sample.date"
names(ubiome)
source.df = ubiome[,-1]
names(source.df)
dim(source.df)
target.d
target.key = as.data.frame(ubiome$sample.date)
target.key
target.key = as.data.frame(ubiome$sample.date, key = names(source.df))
target.key
target.key = data.frame(ubiome$sample.date, key = names(source.df))
target.key
source.df = as.matrix(ubiome[,-1])
source.df
names(source.df)
colnames(source.df)
source.matrix = as.matrix(ubiome[,-1])
colnames(source.matrix)
rm(source.df)
rownames(source.matrix)
rownames(source.matrix) = colnames(source.matrix)
target.key
target.key$ubiome.sample.date = as.Date(target.key$ubiome.sample.date)
strftime(target.key$ubiome.sample.date[1], "%m.%d.%Y")
as.POSIXct.date(target.key$ubiome.sample.date[1], format = "%m.%d.%Y")
as.POSIXct(target.key$ubiome.sample.date[1], format = "%m.%d.%Y")
target.key$ubiome.sample.date = sapply(target.key$ubiome.sample.date, FUN = function(x) as.POSIXct(x, format = "%m.%d.%Y"))
target.key
class(target.key$ubiome.sample.date)
source('~/Desktop/ubiome/ubiome_analysis.R')
?target.source.diff
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.source.diff[,1], source.df = source.matrix, source.key = colnames(source.matrix), souce.matrix = TRUE)
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.data[,1], source.df = source.matrix, source.key = colnames(source.matrix), souce.matrix = TRUE)
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.data[,1], source.df = source.matrix, source.key = colnames(source.matrix), source.matrix = TRUE)
head(pairwise.res)
library(ggplot2)
names(pairwise.res)[2] = "time.difference"
head(pairwise.res)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances)) + geom_point()
library(plotly)
py = plotly()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() + geom_label()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() + geom_text()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
devtools::install_github("ropensci/plotly")
set_credentials_file("crude2refined", "amrmb6o5bc")
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
source('~/Desktop/ubiome/ubiome_analysis.R')
names(pairwise.res)
View(pairwise.res)
names(pairwise.res.noise)
ggplot(pairwise.res.noise, aes(x = time.difference, y = source.matrix.noise.distances, label = pairs)) + geom_text() -> p.noise
py$ggplotly(p.noise, kwargs=list(filename="noise-data", fileopt="overwrite"))
head(pairwise.res)
pairwise.res$pairs[1]
strsplit(pairwise.res$pairs[1], split = ".")
strsplit(pairwise.res$pairs[1], split = "\.")
strsplit(pairwise.res$pairs[1], split = "\\.")
strsplit(pairwise.res$pairs[1], split = "//.")
strsplit(pairwise.res$pairs[1], split = "\.")
strsplit(pairwise.res$pairs[1], split = "\\.")
strsplit(pairwise.res$pairs[1], split = "2015")
strsplit(as.character(pairwise.res$pairs[1]), split = "2015")
strsplit(as.character(pairwise.res$pairs[1]), split = ".")
strsplit(as.character(pairwise.res$pairs[1]), split = "\.")
strsplit(as.character(pairwise.res$pairs[1]), split = "/.")
strsplit(as.character(pairwise.res$pairs[1]), split = "//.")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.")
strsplit(as.character(pairwise.res$pairs[1]), split = "X....")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")[[1]][2]
substr(strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")[[1]][2], 1, 4)
min(2014,2015)
get.base.year = function(x){
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][1], 1, 4))
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
return(min(year.1, year.2))
}
get.base.year(pairwise.res$pairs[1])
x = pairwise.res$pairs[1]
x
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][1], 1, 4))
as.character(x)
substr(strsplit(as.character(x), split = "X.....")
)
strsplit(as.character(x), split = "X.....")
strsplit(as.character(x), split = "X.....")[[1]][1]
get.base.year = function(x){
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][3], 1, 4))
return(min(year.1, year.2))
}
get.base.year(pairwise.res$pairs[1])
get.base.year(pairwise.res$pairs[2])
get.base.year(pairwise.res$pairs[3])
get.base.year(pairwise.res$pairs[4])
pairwise.res$pairs[4]
pairwise.res$pairs[4] -> x
x
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
year.1
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][3], 1, 4))
strsplit(as.character(x), split = "X.....")[[1]][3]
strsplit(as.character(x), split = "X.....")
strsplit(as.character(x), split = "-")
length(strsplit(as.character(x), split = "-")[[1]][1])
nchar(strsplit(as.character(x), split = "-")[[1]][1])
nchar(strsplit(as.character(x), split = "-")[[1]][2])
x
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.1.chars
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.2.chars
year.1 = substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars))
year.1
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.1
get.base.year = function(x){
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)))
return(min(year.1, year.2))
}
get.base.year(x)
x
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)))
year.2.chars
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)-1))
year.2
get.base.year = function(x){
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)-1))
return(min(year.1, year.2))
}
get.base.year(x)
pairwise.res$base.year = sapply(pairwise.res$pairs, get.base.year)
table(pairwise.res$base.year)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text() -> p
library(plotly)
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
print(p)
head(pairwise.res)
pairwise.res$base.year = as.factor(pairwise.res$base.year)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_point() -> p
print(p)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colour = base.year)) + geom_point() -> p
print(p)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text()) -> p
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colour = base.year)) + geom_text() -> p
print(p)
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_text() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
source('~/Documents/uBiome-analysis/scripts/data-manip/merge-sheets-excel.R')
df.1 = read.csv("./processedData/species-data.csv", header = TRUE, stringsAsFactors = FALSE)
df.2 = read.csv("./processedData/merged-excel-sheets/species-data.csv", header = TRUE, stringsAsFactors = FALSE)
head(df.1)
head(df.2)
head(df.1[,c(1:5)])
head(df.2[,c(1:5)])
tail(df.1[,c(1:5)])
tail(df.2[,c(1:5)])
bleh = read.csv("./processedData/merged-excel-sheets/family-data.csv", header = TRUE, stringsAsFactors = FALSE)
head(bleh)
nrow(family)
nrow(bleh)
length(unique(bleh$family))
dim(bleh)
dim(df.1)
dfm(df.2)
dim(df.2)
bleh = read.csv("./processedData/merged-excel-sheets/genus-data.csv", header = TRUE, stringsAsFactors = FALSE)
head(bleh)
dim(bleh)
bleh = read.csv("./processedData/merged-excel-sheets/family-data.csv", header = TRUE, stringsAsFactors = FALSE)
dim(beh)
dim(bleh)
source('~/Documents/uBiome-analysis/scripts/analysis/MDS-bray-curtis.R')
print(p)
head(res)
py$ggplotly(p, kwargs=list(filename="LS-ubiome-Bray-Curtis-MDS", fileopt="overwrite"))
library(plotly)
py = plotly()
py$ggplotly(p, kwargs=list(filename="LS-ubiome-Bray-Curtis-MDS", fileopt="overwrite"))
names(fit)
head(fit$points)
head(fit$stress)
head(res)
res$dates = as.Date(res$dates, format='%m.%d.%Y')
library(reshape)
res.m = melt(, id = "dates")
res.m = melt(res, id = "dates")
head(res.m)
ggplot(res.m, aes(x = dates, y = value)) + geom_point() +
facet_wrap(~variable, nrow = 3, scales = "free_y") + stat_smooth() -> p
print(p)
py$ggplotly(p, kwargs=list(filename="LS-ubiome-Bray-Curtis-MDS-vs-time", fileopt="overwrite"))
