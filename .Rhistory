df.m = melt(df.agg, id.vars = Group.1)
?melt
df.m = melt(df.agg, id.vars = "Group.1")
head(df.m)
df.agg$filename = NULL
df.m = melt(df.agg, id.vars = "Group.1")
head(df.m)
head(df.agg)
df.agg$Group.1 = NULL
df.m = melt(df.agg, id.vars = "hour")
head(df.m)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(~variabe, nrow = 1)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(.~variabe, nrow = 1)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(.~variable, nrow = 1)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(~variable, nrow = 1)
ggplot(df.m, aes(x = as.factor(hour), y = value)) + geom_point() + facet_wrap(~variable, nrow = 1) + xlab("hour")
bleh = read.csv("~/Desktop/DeviantArt-simple_sort/", header = FALSE, stringsAsFactors = FALSE)
bleh = read.delim("~/Desktop/DeviantArt-simple_sort/", header = FALSE, stringsAsFactors = FALSE)
bleh = read.delim("~/Desktop/DeviantArt-simple_sort/", header = FALSE, stringsAsFactors = FALSE)
bleh = read.table("~/Desktop/DeviantArt-simple_sort/", header = FALSE, stringsAsFactors = FALSE)
bleh = read.delim("~/Desktop/DeviantArt_phtography_images.txt", header = FALSE, stringsAsFactors = FALSE)
head(bleh)
names(bleh) = "filename"
head(bleh)
strsplit(bleh$filename[1], split = "/")
strsplit(bleh$filename[1], split = "/")[[1]]
strsplit(bleh$filename[1], split = "/")[[1]][2]
bleh$cat.1 = sapply(bleh$filename, FUN = function(x) strsplit(x, split = "/")[[1]][2])
bleh$cat.2 = sapply(bleh$filename, FUN = function(x) strsplit(x, split = "/")[[1]][3])
table(bleh$cat.1)
table(bleh$cat.2)
table(bleh$cat.1)
version()
version
update.packages(checkBuilt = TRUE)
version
packageStatus()
library(devtools)
install_github("myazdani/cats")
library(cats)
?cat_function
?cat_function
cat_function()
?cat_function
library(cats)
?cat_function
single.face = read.delim("~/Dropbox/Broadway_paper/broadway_samples_to_label/data-labels/AliseLabels_raw/00_1_face_textfile.txt", header = FALSE, stringsAsFactors = FALSE)
head(single.face)
multiple.faces = read.delim("~/Dropbox/Broadway_paper/broadway_samples_to_label/data-labels/AliseLabels_raw/00_2_or_more_textfile.txt", header = FALSE, stringsAsFactors = FALSE)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][length(strsplit(x, split = "//")[[1]])])
head(single.face)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][length(strsplit(x, split = "//"))])
head(single.face)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][8])
head(single.face)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][7])
head(single.face)
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "//")[[1]][6])
head(single.face)
strsplit(single.face$filename[1], split = "///")
strsplit(single.face$filename[1], split = "//")
strsplit(single.face$filename[1], split = "/")
strsplit(single.face$filename[1], split = "\\")
strsplit(single.face$filename[1], split = "\")
)
strsplit(single.face$filename[1], split = "\\")
strsplit(single.face$filename[1], split = "\\\")
)
strsplit(single.face$filename[1], split = "\\\\")
strsplit(single.face$filename[1], split = "\\\\\\\\")
strsplit(single.face$filename[1], split = "\\\\\\\\")
strsplit(single.face$filename[1], split = 00_1_face\\")
strsplit(single.face$filename[1], split = "00_1_face\\")
strsplit(single.face$filename[1], split = "00_1_face")
strsplit(single.face$V1[1], split = "00_1_face")
strsplit(single.face$V1[1], split = "\\")
strsplit(single.face$V1[1], split = "\\\\\")
strsplit(single.face$V1[1], split = "\\\\")
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "\\\\")[[1]][length(strsplit(x, split = "\\\\")[[1]])])
head(single.face)
multiple.faces$filename = sapply(multiple.faces$V1, FUN = function(x) strsplit(x, split = "\\\\")[[1]][length(strsplit(x, split = "\\\\")[[1]])])
head(multiple.faces)
?list.files
interaction(multiple.faces$filename, single.face$filename)
length(multiple.faces$filename)
head(multiple.faces$filename)
head(single.face$filename)
tail(single.face$filename)
bleh = interaction(multiple.faces$filename, single.face$filename)
bleh = intersect(multiple.faces$filename, single.face$filename)
files = read.delim("~/Desktop/filename_samples.txt", header = FALSE, stringsAsFactors = FALSE)
head(files)
files$filenames = sapply(files$V1, FUN = function(x) strsplit(x, split = "/")[[1]][length(strsplit(x, split = "/")[[1]])])
head(files)
multiple.faces$filename = sapply(multiple.faces$filename, FUN = function(x) gsub(" ", "", x, fixed = TRUE))
head(multiple.faces)
head(multiple.faces$filename)
single.face$filename = sapply(single.face$filename, FUN = function(x) gsub(" ", "", x, fixed = TRUE))
files$face.label = "No faces"
files$face.label[which(files$filenames %in% single.face$filename)] = "Single face"
files$face.label[which(files$filenames %in% multiple.faces$filename)] = "Multiple faces"
head(files)
table(files$face.label)
opencv = read.csv("~/Dropbox/Broadway_paper/broadway_samples_to_label/data-labels/broadway_sample.csv", header = TRUE, stringsAsFactors= FALSE)
head(opencv)
files.opencv = merge(opencv[,c("filename", "num_faces")], files)
names(files.opencv)
?merge
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all.y = TRUE)
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all = FALSE)
head(opencv$filename)
head(files$filenames)
names(files)
names(files)[2] = "filename"
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all = FALSE)
duplicated(files.opencv$filename)
which(duplicated(files.opencv$filename))
anyDuplicated(files.opencv$filename)
n_occur = data.frame(table(files.opencv$filename))
n_occur[n_occur$Freq > 1,]
which(files$filename == "10518159_856199451074135_1247659821_n.jpg")
files[442,]
files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"
which(files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg")
files.opencv[ which(files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"), ]
opencv[which(opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"),]
nrow(files.opencv)
nrow(unique(files.opencv))
library(caret)
head(files.opencv)
files.opencv$OpenCV.label = "No faces"
files.opencv$OpenCV.label[which(files.opencv$num_faces ==1] = "Single face"
files.opencv$OpenCV.label[which(files.opencv$num_faces ==1)] = "Single face"
head(files.opencv)
files.opencv$OpenCV.label[which(files.opencv$num_faces >1)] = "Multiple faces"
head(files.opencv, 10)
head(files.opencv, 20)
confusionMatrix(files.opencv$face.label, files.opencv$OpenCV.label)
nrow(single.face)
8 + 348 + 298
files.opencv.unique = unique(files.opencv)
nrow(files.opencv.unique)
confusionMatrix(files.opencv$OpenCV.label, files.opencv$face.label)
confusionMatrix(files.opencv.unique$OpenCV.label, files.opencv.unique$face.label)
confusionMatrix(files.opencv.unique$OpenCV.label, files.opencv.unique$face.label)
source('~/Dropbox/Broadway_paper/broadway_samples_to_label/scripts/parse-confusion-matrix.R', echo=TRUE)
head(files.opencv.unique)
class(files.opencv.unique$face.label)
class(files.opencv.unique$OpenCV.label)
unique(files.opencv.unique$OpenCV.label)
unique(files.opencv.unique$face.label)
source('~/Dropbox/Broadway_paper/broadway_samples_to_label/scripts/parse-confusion-matrix.R', echo=TRUE)
install.packages("~/Documents/pairwiseDist/")
library(pairwiseDist)
?pairwise.dist
library(pairwiseDist)
?metric.learning
library(pairwiseDist)
?metric.learning
x <- read.table(textConnection('t0 t1 t2
aaa  0  1  0
bbb  1  0  1
ccc  1  1  1
ddd  1  1  0
' ), header=TRUE)
metric.learning(target = x$t0, df = x)
bleh = read.delim("~/Desktop/ubiome/bray_curtis_ubiome_amgut.txt", header = TRUE, stringsAsFactors = FALSE)
head(bleh)
names(bleh)
bleh[c(1:40), c(1:40)]
bleh[c(1:39), c(1:39)]
bleh[c(1:39), c(1:39)]
bleh[c(1:38), c(1:39)]
library(pairDist)
library(pairwiseDist)
rm(bleh)
ubiome.amgut = read.delim("~/Desktop/ubiome/bray_curtis_ubiome_amgut.txt", header = TRUE, stringsAsFactors = FALSE)
head(ubiome.amgut)
ubiome = ubiome.amgut[c(1:38), c(1:39)]
names(ubiome)
ubiome$X
names(ubiome)[1] = "sample.date"
names(ubiome)
source.df = ubiome[,-1]
names(source.df)
dim(source.df)
target.d
target.key = as.data.frame(ubiome$sample.date)
target.key
target.key = as.data.frame(ubiome$sample.date, key = names(source.df))
target.key
target.key = data.frame(ubiome$sample.date, key = names(source.df))
target.key
source.df = as.matrix(ubiome[,-1])
source.df
names(source.df)
colnames(source.df)
source.matrix = as.matrix(ubiome[,-1])
colnames(source.matrix)
rm(source.df)
rownames(source.matrix)
rownames(source.matrix) = colnames(source.matrix)
target.key
target.key$ubiome.sample.date = as.Date(target.key$ubiome.sample.date)
strftime(target.key$ubiome.sample.date[1], "%m.%d.%Y")
as.POSIXct.date(target.key$ubiome.sample.date[1], format = "%m.%d.%Y")
as.POSIXct(target.key$ubiome.sample.date[1], format = "%m.%d.%Y")
target.key$ubiome.sample.date = sapply(target.key$ubiome.sample.date, FUN = function(x) as.POSIXct(x, format = "%m.%d.%Y"))
target.key
class(target.key$ubiome.sample.date)
source('~/Desktop/ubiome/ubiome_analysis.R')
?target.source.diff
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.source.diff[,1], source.df = source.matrix, source.key = colnames(source.matrix), souce.matrix = TRUE)
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.data[,1], source.df = source.matrix, source.key = colnames(source.matrix), souce.matrix = TRUE)
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.data[,1], source.df = source.matrix, source.key = colnames(source.matrix), source.matrix = TRUE)
head(pairwise.res)
library(ggplot2)
names(pairwise.res)[2] = "time.difference"
head(pairwise.res)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances)) + geom_point()
library(plotly)
py = plotly()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() + geom_label()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() + geom_text()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
devtools::install_github("ropensci/plotly")
set_credentials_file("crude2refined", "amrmb6o5bc")
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
source('~/Desktop/ubiome/ubiome_analysis.R')
names(pairwise.res)
View(pairwise.res)
names(pairwise.res.noise)
ggplot(pairwise.res.noise, aes(x = time.difference, y = source.matrix.noise.distances, label = pairs)) + geom_text() -> p.noise
py$ggplotly(p.noise, kwargs=list(filename="noise-data", fileopt="overwrite"))
head(pairwise.res)
pairwise.res$pairs[1]
strsplit(pairwise.res$pairs[1], split = ".")
strsplit(pairwise.res$pairs[1], split = "\.")
strsplit(pairwise.res$pairs[1], split = "\\.")
strsplit(pairwise.res$pairs[1], split = "//.")
strsplit(pairwise.res$pairs[1], split = "\.")
strsplit(pairwise.res$pairs[1], split = "\\.")
strsplit(pairwise.res$pairs[1], split = "2015")
strsplit(as.character(pairwise.res$pairs[1]), split = "2015")
strsplit(as.character(pairwise.res$pairs[1]), split = ".")
strsplit(as.character(pairwise.res$pairs[1]), split = "\.")
strsplit(as.character(pairwise.res$pairs[1]), split = "/.")
strsplit(as.character(pairwise.res$pairs[1]), split = "//.")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.")
strsplit(as.character(pairwise.res$pairs[1]), split = "X....")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")[[1]][2]
substr(strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")[[1]][2], 1, 4)
min(2014,2015)
get.base.year = function(x){
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][1], 1, 4))
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
return(min(year.1, year.2))
}
get.base.year(pairwise.res$pairs[1])
x = pairwise.res$pairs[1]
x
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][1], 1, 4))
as.character(x)
substr(strsplit(as.character(x), split = "X.....")
)
strsplit(as.character(x), split = "X.....")
strsplit(as.character(x), split = "X.....")[[1]][1]
get.base.year = function(x){
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][3], 1, 4))
return(min(year.1, year.2))
}
get.base.year(pairwise.res$pairs[1])
get.base.year(pairwise.res$pairs[2])
get.base.year(pairwise.res$pairs[3])
get.base.year(pairwise.res$pairs[4])
pairwise.res$pairs[4]
pairwise.res$pairs[4] -> x
x
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
year.1
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][3], 1, 4))
strsplit(as.character(x), split = "X.....")[[1]][3]
strsplit(as.character(x), split = "X.....")
strsplit(as.character(x), split = "-")
length(strsplit(as.character(x), split = "-")[[1]][1])
nchar(strsplit(as.character(x), split = "-")[[1]][1])
nchar(strsplit(as.character(x), split = "-")[[1]][2])
x
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.1.chars
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.2.chars
year.1 = substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars))
year.1
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.1
get.base.year = function(x){
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)))
return(min(year.1, year.2))
}
get.base.year(x)
x
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)))
year.2.chars
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)-1))
year.2
get.base.year = function(x){
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)-1))
return(min(year.1, year.2))
}
get.base.year(x)
pairwise.res$base.year = sapply(pairwise.res$pairs, get.base.year)
table(pairwise.res$base.year)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text() -> p
library(plotly)
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
print(p)
head(pairwise.res)
pairwise.res$base.year = as.factor(pairwise.res$base.year)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_point() -> p
print(p)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colour = base.year)) + geom_point() -> p
print(p)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text()) -> p
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colour = base.year)) + geom_text() -> p
print(p)
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_text() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
library(devtools)
install_github("myazdani/pairwise-dist")
library(pairwiseDist)
library(pairwiseDist)
library(pairwiseDist)
library(pairwiseDist)
?pairwise.squared.diff
??pairwise.squared.diff
install_github("myazdani/pairwise-dist")
library(devtools)
install_github("myazdani/pairwise-dist")
library(pairwiseDist)
devtools::install_github("yazdani/pairwise-dist")
devtools::install_github("myazdani/pairwise-dist")
library(pairwiseDist)
install.packages("devtools")
library(devtools)
install_github('quandl/R-package')
library(Quandl)
mydata = Quandl(“FRED/GDP”)
mydata = Quandl("FRED/GDP")
head(mydata)
plot(mydata$Value)
tail(mydata)
bleh = Quandl("ZILL/Z92037_MLPSF")
head(bleh)
nrow(bleh)
tail(bleh)
library(ggplot2)
ggplot(bleh, aes(x=Date, y = Value)) + geom_point()
bleh = Quandl("ZILL/Z92128_MLPSF")
ggplot(bleh, aes(x=Date, y = Value)) + geom_point()
lj = Quandl("ZILL/Z92037_MLPSF")
lj$city = "LJ"
bleh$city = "RB"
res = rbind(bleh, lj)
ggplot(res, aes(x = Date, y = Value, colur = city)) + geom_point()
head(res)
class(res$city)
res$city = as.factor(res$city)
ggplot(res, aes(x = Date, y = Value, colur = city)) + geom_point()
ggplot(res, aes(x = Date, y = Value, colour = city)) + geom_point()
library(ploty)
library(plotly)
ggplot(res, aes(x = Date, y = Value, colour = city)) + geom_point() -> p
py <- plotly()
response <- py$ggplotly(p, kwargs=list(filename="RB-LJ-MLPSF", fileopt="overwrite"))
load("~/Documents/misc_work/just_count/data/enron_mysqldump.RData")
head(employeelist)
unique(employeelist$status)
table(employeelist$status)
setwd("~/Documents/uBiome-analysis/")
df = read.csv("./processedData/pairwise-differences/genus-pairwise-time-diff-high-abundant-BAD-DATES-REMOVED.csv", header = TRUE, stringsAsFactors = FALSE)
head(df)
names(df)[c(1:3)]
names(df)[c(1:4)]
df.biome = df[,-c(1:2)]
head(df.biome)
names(df.biome)
df.melt <- melt(df.biome, id.vars="date.diff")
library(reshape)
df.melt <- melt(df.biome, id.vars="date.diff")
head(df.melt)
bleh = subset(df.melt, date.diff == "2012-04-03 - 2013-07-14")
head(bleh)
ggplot(bleh, aes(x = variable, y = value)) + geom_point()
library(reshape)
library(reshape)
ggplot(bleh, aes(x = variable, y = value)) + geom_point()
library(ggplot2)
library(ggplot2)
ggplot(bleh, aes(x = variable, y = value)) + geom_point()
p =  ggplot(bleh, aes(x = variable, y = value)) + geom_point()
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) -> q
print(q)
p =  ggplot(bleh, aes(x = variable, y = value)) + geom_point(size = 6)
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) -> q
print(q)
p =  ggplot(bleh, aes(x = variable, y = value)) + geom_point(size = 2)
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) -> q
print(q)
p =  ggplot(bleh, aes(x = variable, y = value)) + geom_point(size = 1)
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) -> q
print(q)
?ggsave
20*39
png("plot.png", width=100, height=100, res=120)
print(q)
dev.off()
png("plot.png", width=100, height=100, res=900)
print(q)
dev.off()
p =  ggplot(bleh, aes(x = variable, y = value)) + geom_point(size = 4)
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) -> q
png("plot.png", width=100, height=100, res=900)
print(q)
dev.off()
png("plot.png", width=400, height=400, res=200)
print(q)
dev.off()
p =  ggplot(bleh, aes(x = variable, y = value)) + geom_point(size = 1)
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) -> q
png("plot.png", width=400, height=400, res=200)
print(q)
dev.off()
png("plot.png", width=200, height=200, res=200)
print(q)
dev.off()
png("plot.png", width=200, height=200, res=400)
print(q)
dev.off()
png("plot.png", width=200, height=200, res=300)
print(q)
dev.off()
?ggsave
ggsave(filename = "plot.png", width = 4, height = 4)
ggsave(filename = "plot.png", width = 1, height = 1)
ggsave(filename = "plot.png", width = 4, height = 4)
ggsave(filename = "plot.png", width = 4, height = 4, dpi = 100)
ggsave(filename = "plot.png", width = 1, height = 1, dpi = 100)
ggsave(filename = "plot.png", width = 4, height = 4, scale = .5)
ggsave(filename = "plot.png", width = 4, height = 4, scale = 2)
ggsave(filename = "plot.png", width = 3, height = 3, scale = 2)
ggsave(filename = "plot.png", width = 3, height = 3, scale = .1)
ggsave(filename = "plot.png", width = 4, height = 4)
ggsave(filename = "plot.png", width = 4, height = 4)
p =  ggplot(bleh, aes(x = variable, y = value)) + geom_point(size = 1)
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) -> q
ggsave(filename = "plot.png", width = 4, height = 4)
ggsave(filename = "plot.png", width = 4, height = 4, scale = .5)
ggsave(filename = "plot.png", width = 1, height = 1, scale = .5)
ggsave(filename = "plot.png", width = 4, height = 4, scale = 1, dpi = 300)
ggsave(filename = "plot.png", width = 4, height = 4, scale = 1, dpi = 300, units = "cm")
