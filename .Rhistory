)
strsplit(single.face$filename[1], split = "\\\\")
strsplit(single.face$filename[1], split = "\\\\\\\\")
strsplit(single.face$filename[1], split = "\\\\\\\\")
strsplit(single.face$filename[1], split = 00_1_face\\")
strsplit(single.face$filename[1], split = "00_1_face\\")
strsplit(single.face$filename[1], split = "00_1_face")
strsplit(single.face$V1[1], split = "00_1_face")
strsplit(single.face$V1[1], split = "\\")
strsplit(single.face$V1[1], split = "\\\\\")
strsplit(single.face$V1[1], split = "\\\\")
single.face$filename = sapply(single.face$V1, FUN = function(x) strsplit(x, split = "\\\\")[[1]][length(strsplit(x, split = "\\\\")[[1]])])
head(single.face)
multiple.faces$filename = sapply(multiple.faces$V1, FUN = function(x) strsplit(x, split = "\\\\")[[1]][length(strsplit(x, split = "\\\\")[[1]])])
head(multiple.faces)
?list.files
interaction(multiple.faces$filename, single.face$filename)
length(multiple.faces$filename)
head(multiple.faces$filename)
head(single.face$filename)
tail(single.face$filename)
bleh = interaction(multiple.faces$filename, single.face$filename)
bleh = intersect(multiple.faces$filename, single.face$filename)
files = read.delim("~/Desktop/filename_samples.txt", header = FALSE, stringsAsFactors = FALSE)
head(files)
files$filenames = sapply(files$V1, FUN = function(x) strsplit(x, split = "/")[[1]][length(strsplit(x, split = "/")[[1]])])
head(files)
multiple.faces$filename = sapply(multiple.faces$filename, FUN = function(x) gsub(" ", "", x, fixed = TRUE))
head(multiple.faces)
head(multiple.faces$filename)
single.face$filename = sapply(single.face$filename, FUN = function(x) gsub(" ", "", x, fixed = TRUE))
files$face.label = "No faces"
files$face.label[which(files$filenames %in% single.face$filename)] = "Single face"
files$face.label[which(files$filenames %in% multiple.faces$filename)] = "Multiple faces"
head(files)
table(files$face.label)
opencv = read.csv("~/Dropbox/Broadway_paper/broadway_samples_to_label/data-labels/broadway_sample.csv", header = TRUE, stringsAsFactors= FALSE)
head(opencv)
files.opencv = merge(opencv[,c("filename", "num_faces")], files)
names(files.opencv)
?merge
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all.y = TRUE)
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all = FALSE)
head(opencv$filename)
head(files$filenames)
names(files)
names(files)[2] = "filename"
files.opencv = merge(opencv[,c("filename", "num_faces")], files, all = FALSE)
duplicated(files.opencv$filename)
which(duplicated(files.opencv$filename))
anyDuplicated(files.opencv$filename)
n_occur = data.frame(table(files.opencv$filename))
n_occur[n_occur$Freq > 1,]
which(files$filename == "10518159_856199451074135_1247659821_n.jpg")
files[442,]
files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"
which(files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg")
files.opencv[ which(files.opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"), ]
opencv[which(opencv$filename %in% "10518159_856199451074135_1247659821_n.jpg"),]
nrow(files.opencv)
nrow(unique(files.opencv))
library(caret)
head(files.opencv)
files.opencv$OpenCV.label = "No faces"
files.opencv$OpenCV.label[which(files.opencv$num_faces ==1] = "Single face"
files.opencv$OpenCV.label[which(files.opencv$num_faces ==1)] = "Single face"
head(files.opencv)
files.opencv$OpenCV.label[which(files.opencv$num_faces >1)] = "Multiple faces"
head(files.opencv, 10)
head(files.opencv, 20)
confusionMatrix(files.opencv$face.label, files.opencv$OpenCV.label)
nrow(single.face)
8 + 348 + 298
files.opencv.unique = unique(files.opencv)
nrow(files.opencv.unique)
confusionMatrix(files.opencv$OpenCV.label, files.opencv$face.label)
confusionMatrix(files.opencv.unique$OpenCV.label, files.opencv.unique$face.label)
confusionMatrix(files.opencv.unique$OpenCV.label, files.opencv.unique$face.label)
source('~/Dropbox/Broadway_paper/broadway_samples_to_label/scripts/parse-confusion-matrix.R', echo=TRUE)
head(files.opencv.unique)
class(files.opencv.unique$face.label)
class(files.opencv.unique$OpenCV.label)
unique(files.opencv.unique$OpenCV.label)
unique(files.opencv.unique$face.label)
source('~/Dropbox/Broadway_paper/broadway_samples_to_label/scripts/parse-confusion-matrix.R', echo=TRUE)
install.packages("~/Documents/pairwiseDist/")
library(pairwiseDist)
?pairwise.dist
library(pairwiseDist)
?metric.learning
library(pairwiseDist)
?metric.learning
x <- read.table(textConnection('t0 t1 t2
aaa  0  1  0
bbb  1  0  1
ccc  1  1  1
ddd  1  1  0
' ), header=TRUE)
metric.learning(target = x$t0, df = x)
bleh = read.delim("~/Desktop/ubiome/bray_curtis_ubiome_amgut.txt", header = TRUE, stringsAsFactors = FALSE)
head(bleh)
names(bleh)
bleh[c(1:40), c(1:40)]
bleh[c(1:39), c(1:39)]
bleh[c(1:39), c(1:39)]
bleh[c(1:38), c(1:39)]
library(pairDist)
library(pairwiseDist)
rm(bleh)
ubiome.amgut = read.delim("~/Desktop/ubiome/bray_curtis_ubiome_amgut.txt", header = TRUE, stringsAsFactors = FALSE)
head(ubiome.amgut)
ubiome = ubiome.amgut[c(1:38), c(1:39)]
names(ubiome)
ubiome$X
names(ubiome)[1] = "sample.date"
names(ubiome)
source.df = ubiome[,-1]
names(source.df)
dim(source.df)
target.d
target.key = as.data.frame(ubiome$sample.date)
target.key
target.key = as.data.frame(ubiome$sample.date, key = names(source.df))
target.key
target.key = data.frame(ubiome$sample.date, key = names(source.df))
target.key
source.df = as.matrix(ubiome[,-1])
source.df
names(source.df)
colnames(source.df)
source.matrix = as.matrix(ubiome[,-1])
colnames(source.matrix)
rm(source.df)
rownames(source.matrix)
rownames(source.matrix) = colnames(source.matrix)
target.key
target.key$ubiome.sample.date = as.Date(target.key$ubiome.sample.date)
strftime(target.key$ubiome.sample.date[1], "%m.%d.%Y")
as.POSIXct.date(target.key$ubiome.sample.date[1], format = "%m.%d.%Y")
as.POSIXct(target.key$ubiome.sample.date[1], format = "%m.%d.%Y")
target.key$ubiome.sample.date = sapply(target.key$ubiome.sample.date, FUN = function(x) as.POSIXct(x, format = "%m.%d.%Y"))
target.key
class(target.key$ubiome.sample.date)
source('~/Desktop/ubiome/ubiome_analysis.R')
?target.source.diff
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.source.diff[,1], source.df = source.matrix, source.key = colnames(source.matrix), souce.matrix = TRUE)
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.data[,1], source.df = source.matrix, source.key = colnames(source.matrix), souce.matrix = TRUE)
pairwise.res = target.source.diff(target.key = target.data$key, target.df = target.data[,1], source.df = source.matrix, source.key = colnames(source.matrix), source.matrix = TRUE)
head(pairwise.res)
library(ggplot2)
names(pairwise.res)[2] = "time.difference"
head(pairwise.res)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances)) + geom_point()
library(plotly)
py = plotly()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() + geom_label()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() + geom_text()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point()
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_point() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
devtools::install_github("ropensci/plotly")
set_credentials_file("crude2refined", "amrmb6o5bc")
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
source('~/Desktop/ubiome/ubiome_analysis.R')
names(pairwise.res)
View(pairwise.res)
names(pairwise.res.noise)
ggplot(pairwise.res.noise, aes(x = time.difference, y = source.matrix.noise.distances, label = pairs)) + geom_text() -> p.noise
py$ggplotly(p.noise, kwargs=list(filename="noise-data", fileopt="overwrite"))
head(pairwise.res)
pairwise.res$pairs[1]
strsplit(pairwise.res$pairs[1], split = ".")
strsplit(pairwise.res$pairs[1], split = "\.")
strsplit(pairwise.res$pairs[1], split = "\\.")
strsplit(pairwise.res$pairs[1], split = "//.")
strsplit(pairwise.res$pairs[1], split = "\.")
strsplit(pairwise.res$pairs[1], split = "\\.")
strsplit(pairwise.res$pairs[1], split = "2015")
strsplit(as.character(pairwise.res$pairs[1]), split = "2015")
strsplit(as.character(pairwise.res$pairs[1]), split = ".")
strsplit(as.character(pairwise.res$pairs[1]), split = "\.")
strsplit(as.character(pairwise.res$pairs[1]), split = "/.")
strsplit(as.character(pairwise.res$pairs[1]), split = "//.")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.")
strsplit(as.character(pairwise.res$pairs[1]), split = "X....")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")
strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")[[1]][2]
substr(strsplit(as.character(pairwise.res$pairs[1]), split = "X.....")[[1]][2], 1, 4)
min(2014,2015)
get.base.year = function(x){
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][1], 1, 4))
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
return(min(year.1, year.2))
}
get.base.year(pairwise.res$pairs[1])
x = pairwise.res$pairs[1]
x
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][1], 1, 4))
as.character(x)
substr(strsplit(as.character(x), split = "X.....")
)
strsplit(as.character(x), split = "X.....")
strsplit(as.character(x), split = "X.....")[[1]][1]
get.base.year = function(x){
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][3], 1, 4))
return(min(year.1, year.2))
}
get.base.year(pairwise.res$pairs[1])
get.base.year(pairwise.res$pairs[2])
get.base.year(pairwise.res$pairs[3])
get.base.year(pairwise.res$pairs[4])
pairwise.res$pairs[4]
pairwise.res$pairs[4] -> x
x
year.1 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][2], 1, 4))
year.1
year.2 = as.numeric(substr(strsplit(as.character(x), split = "X.....")[[1]][3], 1, 4))
strsplit(as.character(x), split = "X.....")[[1]][3]
strsplit(as.character(x), split = "X.....")
strsplit(as.character(x), split = "-")
length(strsplit(as.character(x), split = "-")[[1]][1])
nchar(strsplit(as.character(x), split = "-")[[1]][1])
nchar(strsplit(as.character(x), split = "-")[[1]][2])
x
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.1.chars
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.2.chars
year.1 = substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars))
year.1
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.1
get.base.year = function(x){
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)))
return(min(year.1, year.2))
}
get.base.year(x)
x
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)))
year.2.chars
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)-1))
year.2
get.base.year = function(x){
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)-1))
return(min(year.1, year.2))
}
get.base.year(x)
pairwise.res$base.year = sapply(pairwise.res$pairs, get.base.year)
table(pairwise.res$base.year)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text() -> p
library(plotly)
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
print(p)
head(pairwise.res)
pairwise.res$base.year = as.factor(pairwise.res$base.year)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_point() -> p
print(p)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colour = base.year)) + geom_point() -> p
print(p)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text()) -> p
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colour = base.year)) + geom_text() -> p
print(p)
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_text() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
setwd("~/Documents/microbiome/uBiome-analysis/")
setwd("~/Documents/uBiome-analysis/")
source('~/Documents/uBiome-analysis/scripts/analysis/MDS-bray-curtis.R')
names(ubiome)
head(ubiome$X)
source('~/Documents/uBiome-analysis/scripts/analysis/MDS-bray-curtis.R')
dim(source.matrix)
source('~/Documents/uBiome-analysis/scripts/analysis/MDS-bray-curtis.R')
head(target.data$ubiome.sample.date)
head(target.data$key)
source('~/Documents/uBiome-analysis/scripts/analysis/MDS-bray-curtis.R')
res = data.frame(x = fit$points[,1], y = fit$points[,2], dates = target.data$ubiome.sample.date)
head(res)
source('~/Documents/uBiome-analysis/scripts/analysis/MDS-bray-curtis.R')
print(p)
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
bleh = read_excel("./data/Excel/1.14.2015 Ubiome kit 168-009-279.xls")
bleh = read_excel("./data/Excel/1.14.2015 Ubiome kit 168-009-279.xls", sheet = "species")
head(bleh)
?list.files
excel.files = list.files("./data/Excel/", full.names = TRUE)
head(excel.files)
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
head(excel.files)
excel.files = list.files("./data/Excel/", full.names = FALSE)
head(excel.files)
strsplit(excel.files[1], split = " Ubiome")
class(bleh)
head(as.data.frame(bleh))
head(bleh)
names(bleh)
data.path = "./data/Excel/"
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
warnings()
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
length(excel.files)
length(data.files)
head(data.files[[1]])
res = Reduce(function(x,y) merge(x,y, all = TRUE), data.files)
head(res)
Reduce(function(...) merge(..., all=TRUE), data.files) -> res
head(res)
nrow(res)
tail(res)
library(plyr)
res = join_all(data.files, match = "all")
head(res)
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
head(res)
ncol(res)
file.names = c()
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
file.names
length(file.names)
length(unique(file.names))
duplicated(file.names)
file.names(which(duplicated(file.names)))
file.names[which(duplicated(file.names))]
"2.17.2014"  %in% file.names
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
head(res)
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
head(res)
nnrow(res)
nrow(res)
species.names = c()
names(data.files[[1]])
species.names = c()
for (i in c(1:legth(data.files))){
species.names = c(data.files[[i]]$species)
}
species.names = c()
for (i in c(1:length(data.files))){
species.names = c(data.files[[i]]$species)
}
length(species.names)
unique(species.names)
length(unique(species.names))
nrow(res)
?join_all
source('~/Documents/uBiome-analysis/scripts/data-manip/get-species-data.R')
nrow(res)
unique(species.names)
length(unique(species.names))
head(res)
length(unique(res$species))
species.names = c()
for (i in c(1:length(data.files))){
species.names = c(species.names, data.files[[i]]$species)
}
length(species.names)
length(unique(species.names))
setdiff(unique(species.names), res$species)
setdiff(res$species, unique(species.names))
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(df)
nrow(df)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(df)
df.pca = princomp(as.matrix(df[,-1]))
head(df.pca)
names(df.pca)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
names(df.pca)
head(df.pca$rotation)
class(df.pca$rotation)
nrow(df.pca$rotation)
nrow(df)
names(df.pca)
dim(df.pca$rotation)
pca.result = prcomp(as.matrix(df[,-1]))
pca.df = as.data.frame(pca.result$x)
pca.df$sample.date = df[,1]
head(pca.df)
ggpairs(pca.df, columns = c(1:4), title = "uBiome Species for LS", params=list(corSize=8))
library(ggplot2)
library(GGally)
ggpairs(pca.df, columns = c(1:4), title = "uBiome Species for LS", params=list(corSize=8))
dev.copy2pdf(file = "./figures/uBiome-species-LS.pdf")
ggplot(pca.df, aes(x = PC1, y = PC2)) + geom_point()
ggpairs(pca.df, columns = c(1:4), title = "uBiome Species for LS", params=list(corSize=2))
dev.copy2pdf(file = "./figures/uBiome-species-LS.pdf")
n <- df$name
# transpose all but the first column (name)
df <- as.data.frame(t(df[,-1]))
colnames(df) <- n
df$myfactor <- factor(row.names(df))
head(df)
names(df)
source('~/Documents/uBiome-analysis/scripts/analysis/MDS-bray-curtis.R')
print(p)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
source('~/.active-rstudio-document')
ggpairs(pca.df, columns = c(1:4), title = "uBiome Species for LS", params=list(corSize=2))
names(pca.df)
ggplot(pca.df, aes(x = PC1, y = PC2, label = sample.date)) +gom_text() -> p
ggplot(pca.df, aes(x = PC1, y = PC2, label = sample.date)) +geom_text() -> p
print(p)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
print(p)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
### PCA-abundance.R
###
### MDS on Bray Curtis distances of uBiome data
setwd("~/Documents/uBiome-analysis/")
df = read.csv("./processedData/species-data.csv", header = TRUE, stringsAsFactors = FALSE)
df[is.na(df)] = 0
head(df)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(df)
?grep
?gsub
gsubt(" ", ".", df$species[1])
gsub(" ", ".", df$species[1])
df$species = sapply(df$species, FUN = function(x) gsub(" ", ".", x))
head(df$species)
# first remember the names
n <- df$species
# transpose all but the first column (name)
df.T <- as.data.frame(t(df[,-1]))
colnames(df.T) <- n
head(df.T)
names(df.T)
nrow(df)
nrow(df.T)
ncol(df)
names(df)[-1]
sapply(names(df[-1]), FUN = function(x) strsplit(x, split = ".abundance")[[1]][1])
unname(sapply(names(df[-1]), FUN = function(x) strsplit(x, split = ".abundance")[[1]][1]))
row.names(df.T) = unname(sapply(names(df[-1]), FUN = function(x) strsplit(x, split = ".abundance")[[1]][1]))
ncol(df.T)
rownames(df.T)
head(rownames(df.T))
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.DF)
head(pca.df)
?ggpairs
ggpairs(pca.df, columns = c(1:4), label = sample.date, title = "uBiome Species for LS", params=list(corSize=2))
ggpairs(pca.df, columns = c(1:4), title = "uBiome Species for LS", params=list(corSize=2))
ggplot(pca.df, aes(x = PC1, y = PC2, label = sample.date)) +geom_text() -> p
print(p)
pca.df$sample.date = sapply(rownames(df.T), FUN = function(x) strsplit(x, split = "X")[[1]][2])
head(pca.df$sample.date)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
print(p)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
names(pca.df)
pca.df$sample.date = sapply(pca.df$sample.date, FUN = function(x) as.POSIXct(x, format = "%m.%d.%Y"))
head(pca.df$sample.date)
class(pca.df$sample.date)
class(pca.df$sample.date[1])
pca.df$sample.date = sapply(pca.df$sample.date, FUN = function(x) as.POSIXlt(x, format = "%m.%d.%Y"))
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
?strftime
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
##-----------------------------------------------------
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df$sample.date)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df$sample.date)
?as.Date
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
?strsplit
?gsub
pca.df$sample.date = sapply(pca.df$sample.date, FUN = function(x) gsub(".", "-", x))
head(pca.df$sample.date)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df$sample.date)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df$sample.date)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df$sample.date)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
?as.Date
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df$sample.date)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df$sample.date)
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
source('~/Documents/uBiome-analysis/scripts/analysis/PCA-abundance.R')
head(pca.df$sample.date)
class(pca.df$sample.date)
class(pca.df$sample.date[1])
